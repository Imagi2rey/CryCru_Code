{"ast":null,"code":"var _jsxFileName = \"/home/kali/proCry/CryCru/src/components/CoinChart.js\";\nimport React from 'react';\nimport moment from 'moment';\nimport HighChart from './HighChart';\n\nconst cc = require('cryptocompare');\n\ncc.setApiKey(process.env.REACT_APP_CRYPTO_COMPARE_API_KEY);\n\nclass CoinChart extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      symbol: '',\n      coin: null,\n      iterations: 7,\n      interval: 1,\n      units: 'days',\n      currency: 'USD',\n      series: []\n    };\n\n    this.componentDidMount = () => {\n      this.setState(() => ({\n        symbol: this.props.symbol\n      }), () => this.fetchHistorical());\n    };\n\n    this.componentDidUpdate = () => {\n      if (this.state.symbol !== this.props.symbol) {\n        this.setState(() => ({\n          symbol: this.props.symbol,\n          series: []\n        }), () => this.fetchHistorical());\n      }\n    };\n\n    this.fetchHistorical = () => {\n      this.historical([], this.state.iterations);\n    };\n\n    this.historical = (prices, iterations) => {\n      const point = moment().subtract(this.state.interval * iterations, this.state.units);\n      cc.priceHistorical(this.state.symbol, [this.state.currency], new Date(point)).then(price => {\n        prices.push([point.valueOf(), price[this.state.currency]]);\n\n        if (iterations > 0) {\n          this.historical(prices, iterations - 1);\n        } else {\n          this.setState(() => ({\n            series: [{\n              data: prices,\n              showInLegend: false\n            }]\n          }));\n        }\n      });\n    };\n\n    this.changeChartSelect = e => {\n      if (e.target.value === 'week') {\n        this.setState(() => ({\n          iterations: 7,\n          interval: 1,\n          units: 'days',\n          series: []\n        }), () => this.fetchHistorical());\n      } else if (e.target.value === 'month') {\n        this.setState(() => ({\n          iterations: 30,\n          interval: 1,\n          units: 'days',\n          series: []\n        }), () => this.fetchHistorical());\n      } else if (e.target.value === 'year') {\n        this.setState(() => ({\n          iterations: 73,\n          interval: 5,\n          units: 'days',\n          series: []\n        }), () => this.fetchHistorical());\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(HighChart, {\n      title: this.props.title,\n      series: this.state.series,\n      changeChartSelect: this.changeChartSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default CoinChart;","map":{"version":3,"sources":["/home/kali/proCry/CryCru/src/components/CoinChart.js"],"names":["React","moment","HighChart","cc","require","setApiKey","process","env","REACT_APP_CRYPTO_COMPARE_API_KEY","CoinChart","Component","state","symbol","coin","iterations","interval","units","currency","series","componentDidMount","setState","props","fetchHistorical","componentDidUpdate","historical","prices","point","subtract","priceHistorical","Date","then","price","push","valueOf","data","showInLegend","changeChartSelect","e","target","value","render","title"],"mappings":"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","sourcesContent":["import React from 'react'\nimport moment from 'moment'\nimport HighChart from './HighChart'\n\nconst cc = require('cryptocompare')\ncc.setApiKey(process.env.REACT_APP_CRYPTO_COMPARE_API_KEY)\n\nclass CoinChart extends React.Component {\n  state = {\n    symbol: '',\n    coin: null,\n    iterations: 7,\n    interval: 1,\n    units: 'days',\n    currency: 'USD',  \n    series: []\n  }\n  componentDidMount = () => {\n    this.setState(() => ({ symbol: this.props.symbol }), () => this.fetchHistorical())\n  }\n  componentDidUpdate = () => {\n    if (this.state.symbol !== this.props.symbol) {\n      this.setState(() => ({\n        symbol: this.props.symbol,\n        series: []\n      }), () => this.fetchHistorical())\n    }\n  }\n  fetchHistorical = () => {\n    this.historical([], this.state.iterations);\n  }\n  historical = (prices, iterations) => {\n    const point = moment().subtract(this.state.interval * iterations, this.state.units)\n    cc.priceHistorical(this.state.symbol, [this.state.currency], new Date(point))\n      .then(price => {\n        prices.push([point.valueOf(), price[this.state.currency]])\n        if (iterations > 0) {\n          this.historical(prices, iterations - 1)\n        } else {\n          this.setState(() => ({\n            series: [{\n              data: prices,\n              showInLegend: false\n            }]\n          }))\n        }\n    })\n  }\n  changeChartSelect = (e) => {\n    if (e.target.value === 'week') {\n      this.setState(() => ({\n        iterations: 7,\n        interval: 1,\n        units: 'days',  \n        series: []\n      }), () => this.fetchHistorical())\n    } else if (e.target.value === 'month') {\n      this.setState(() => ({\n        iterations: 30,\n        interval: 1,\n        units: 'days',  \n        series: []\n      }), () => this.fetchHistorical())\n    } else if (e.target.value === 'year') {\n      this.setState(() => ({\n        iterations: 73,\n        interval: 5,\n        units: 'days',  \n        series: []\n      }), () => this.fetchHistorical())\n    }\n    \n  }\n  render() {\n    return (\n      <HighChart title={this.props.title} series={this.state.series} changeChartSelect={this.changeChartSelect}></HighChart>\n    )\n  }\n}\n\nexport default CoinChart"]},"metadata":{},"sourceType":"module"}